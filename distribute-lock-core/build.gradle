buildscript {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springbootVersion}"
    }
}


apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    maven {
        url 'http://maven.aliyun.com/nexus/content/groups/public'
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

configurations {
    optional
    compile.extendsFrom optional
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

bootJar {
    enabled = false
    classifier = 'boot'
}

jar {
    enabled = true
}


task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc
    classifier 'javadoc'
}

//artifacts {
//    archives sourcesJar
//    archives javadocJar
//}

publishing {
    publications {
        maven( MavenPublication ) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            artifact sourcesJar
            artifact javadocJar

            from components.java

            pom.withXml {
                asNode().dependencies.dependency.findAll { xmlDep ->
                    // mark optional dependencies
                    if ( project.configurations.optional.allDependencies.findAll { dep ->
                        xmlDep.groupId.text() == dep.group && xmlDep.artifactId.text() == dep.name
                    } ) {
                        def xmlOptional = xmlDep.optional[ 0 ];
                        if ( !xmlOptional ) {
                            xmlOptional = xmlDep.appendNode( 'optional' )
                        }
                        xmlOptional.value = 'true';
                    }

                    // fix maven-publish issue when all maven dependencies are placed into runtime scope
                    if ( project.configurations.compile.allDependencies.findAll { dep ->
                        xmlDep.groupId.text() == dep.group && xmlDep.artifactId.text() == dep.name
                    } ) {
                        def xmlScope = xmlDep.scope[ 0 ];
                        if ( !xmlScope ) {
                            xmlScope = xmlDep.appendNode( 'scope' )
                        }
                        xmlScope.value = 'compile';
                    }
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}